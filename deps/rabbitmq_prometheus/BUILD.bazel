load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
<<<<<<< HEAD
load("//:rabbitmq_home.bzl", "rabbitmq_home")
load("//:rabbitmq_run.bzl", "rabbitmq_run")
=======
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
<<<<<<< HEAD
=======
    "broker_for_integration_suites",
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)
    "rabbitmq_app",
    "rabbitmq_integration_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

APP_NAME = "rabbitmq_prometheus"

APP_MODULE = "rabbit_prometheus_app"

APP_ENV = """[
	    {return_per_object_metrics, false},
	    {tcp_config, [{port, 15692}]},
	    {ssl_config, []}
]"""

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_dep rabbitmq_management_agent
# gazelle:erlang_app_dep_exclude amqp_client
# gazelle:erlang_app_dep_exclude rabbit_common

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_description = "Prometheus metrics for RabbitMQ",
    app_env = APP_ENV,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    beam_files = [":beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_management_agent:erlang_app",
        "//deps/rabbitmq_web_dispatch:erlang_app",
        "@accept//:erlang_app",
        "@cowboy//:erlang_app",
        "@prometheus//:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    ignore_warnings = True,
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [":rabbitmq_prometheus_collector_test_proxy_beam_files"],  #keep
    target = ":test_erlang_app",
)

<<<<<<< HEAD
rabbitmq_home(
    name = "broker-for-tests-home",
    plugins = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_stream:erlang_app",
        ":erlang_app",
    ],
)

rabbitmq_run(
    name = "rabbitmq-for-tests-run",
    home = ":broker-for-tests-home",
)
=======
broker_for_integration_suites()
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "rabbit_prometheus_http_SUITE",
    size = "medium",
    flaky = True,
<<<<<<< HEAD
    runtime_deps = [
        "//deps/rabbitmq_stream:erlang_app",
        "//deps/rabbitmq_stream_common:erlang_app",
    ],
=======
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)
)

assert_suites()

alias(
    name = "rabbitmq_prometheus",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

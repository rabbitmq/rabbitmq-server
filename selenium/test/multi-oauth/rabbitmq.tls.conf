auth_backends.1 = rabbit_auth_backend_oauth2

listeners.ssl.1 = 5671

<<<<<<< HEAD
ssl_options.cacertfile = ${RABBITMQ_TEST_DIR}/certs/ca_rabbitmq_certificate.pem
ssl_options.certfile   = ${RABBITMQ_TEST_DIR}/certs/server_rabbitmq_certificate.pem
ssl_options.keyfile    = ${RABBITMQ_TEST_DIR}/certs/server_rabbitmq_key.pem
=======
ssl_options.cacertfile = ${RABBITMQ_CERTS}/ca_rabbitmq_certificate.pem
ssl_options.certfile   = ${RABBITMQ_CERTS}/server_rabbitmq_certificate.pem
ssl_options.keyfile    = ${RABBITMQ_CERTS}/server_rabbitmq_key.pem
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)
ssl_options.verify     = verify_peer
ssl_options.fail_if_no_peer_cert = true

management.ssl.port = 15671
<<<<<<< HEAD
management.ssl.cacertfile = ${RABBITMQ_TEST_DIR}/certs/ca_rabbitmq_certificate.pem
management.ssl.certfile   = ${RABBITMQ_TEST_DIR}/certs/server_rabbitmq_certificate.pem
management.ssl.keyfile    = ${RABBITMQ_TEST_DIR}/certs/server_rabbitmq_key.pem
=======
management.ssl.cacertfile = ${RABBITMQ_CERTS}/ca_rabbitmq_certificate.pem
management.ssl.certfile   = ${RABBITMQ_CERTS}/server_rabbitmq_certificate.pem
management.ssl.keyfile    = ${RABBITMQ_CERTS}/server_rabbitmq_key.pem
>>>>>>> 8d7535e0b (amqqueue_process: adopt new `is_duplicate` backing queue callback)
